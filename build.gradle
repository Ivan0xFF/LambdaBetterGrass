plugins {
	id 'fabric-loom' version '0.12.+'
	id 'io.github.juuxel.loom-quiltflower' version '1.7.+'
	id 'org.quiltmc.quilt-mappings-on-loom' version '4.0.0'
	id 'org.quiltmc.gradle.licenser' version '1.1.+'
	id 'java-library'
	id 'maven-publish'
	id 'com.github.johnrengelman.shadow' version '7.1.2'
	id 'com.modrinth.minotaur' version '2.+'
}


import com.google.gson.GsonBuilder
import com.google.gson.JsonObject
import com.modrinth.minotaur.dependencies.ModDependency
import com.modrinth.minotaur.responses.ResponseError
import net.fabricmc.loom.task.RemapJarTask
import org.apache.http.client.config.CookieSpecs
import org.apache.http.client.config.RequestConfig
import org.apache.http.client.entity.EntityBuilder
import org.apache.http.client.methods.HttpPatch
import org.apache.http.entity.ContentType
import org.apache.http.impl.client.HttpClientBuilder
import org.apache.http.util.EntityUtils

group = project.maven_group
version = "${project.mod_version}+${getMCVersionString()}"
archivesBaseName = project.archives_base_name
Set<String> modules = [
		'fabric-renderer-api-v1',
		'fabric-renderer-indigo',
		'fabric-resource-loader-v0'
]

// This field defines the Java version your mod target.
def targetJavaVersion = 17

boolean isMCVersionNonRelease() {
	return project.minecraft_version.matches('^\\d\\dw\\d\\d[a-z]$')
			|| project.minecraft_version.matches('\\d+\\.\\d+-(pre|rc)(\\d+)')
}

String getMCVersionString() {
	if (isMCVersionNonRelease()) {
		return project.minecraft_version
	}
	def version = project.minecraft_version.split('\\.')
	return version[0] + '.' + version[1]
}

String parseReadme() {
	def excludeRegex = /(?m)<!-- modrinth_exclude\.start -->(.|\n)*?<!-- modrinth_exclude\.end -->/
	def linkRegex = /!\[([A-z_ ]+)]\((images\/[A-z.\/_]+)\)/

	def readme = (String) file('README.md').text
	readme = readme.replaceAll(excludeRegex, '')
	readme = readme.replaceAll(linkRegex, '![$1](https://raw.githubusercontent.com/LambdAurora/LambdaBetterGrass/1.17/$2)')
	return readme
}

repositories {
	mavenLocal()
	mavenCentral()
	maven {
		name 'Gegy'
		url 'https://maven.gegy.dev'
	}
	maven {
		name 'TerraformersMC'
		url 'https://maven.terraformersmc.com/'
		content {
			includeGroup 'com.terraformersmc'
		}
	}
}

configurations {
	shadow
	api.extendsFrom shadow
}

loom {
	accessWidenerPath = file("src/main/resources/lambdabettergrass.accesswidener")
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings(loom.layered {
		addLayer(quiltMappings.mappings("org.quiltmc:quilt-mappings:${minecraft_version}+build.${project.quilt_mappings}:v2"))
	})
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API.
	modules.stream().map { fabricApi.module(it, project.fabric_api_version) }.forEach {
		modImplementation it
	}

	include modImplementation("dev.lambdaurora:spruceui:${project.spruceui_version}")

	modImplementation("com.terraformersmc:modmenu:${project.modmenu_version}") {
		transitive = false
	}

	shadow 'com.electronwill.night-config:core:3.6.3'
	shadow 'com.electronwill.night-config:toml:3.6.3'
}

java {
	sourceCompatibility = JavaVersion.toVersion(targetJavaVersion)
	targetCompatibility = JavaVersion.toVersion(targetJavaVersion)

	withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'
	it.options.deprecation(true)
	it.options.incremental(true)
	it.options.release.set(targetJavaVersion)
}

processResources {
	inputs.property 'version', project.version

	filesMatching('fabric.mod.json') {
		expand 'version': project.version
	}
}

jar {
	from('LICENSE') {
		rename { "${it}_${project.archivesBaseName}" }
	}
}

license {
	rule file('HEADER')
	include '**/*.java'
}

shadowJar {
	dependsOn jar
	configurations = [project.configurations.shadow]
	destinationDirectory.set(file("${project.buildDir}/devlibs"))
	archiveClassifier.set('dev')

	relocate 'com.electronwill.nightconfig', 'dev.lambdaurora.lambdabettergrass.shadow.nightconfig'
}
prepareRemapJar.dependsOn(shadowJar)

modrinth {
	projectId = project.modrinth_id
	versionName = "LambdaBetterGrass ${project.mod_version} (${getMCVersionString()})"
	versionType = isMCVersionNonRelease() ? "beta" : "release"
	uploadFile = tasks.remapJar
	gameVersions = [project.minecraft_version]
	loaders = ["fabric"]
	dependencies = [
			new ModDependency("P7dR8mSH", "required")
	]

	// Changelog fetching
	def changelogText = file('CHANGELOG.md').text.replaceAll('\\r\\n', '\n')
	def regexVersion = ((String) project.mod_version).replaceAll('\\.', /\\./).replaceAll('\\+', '\\+')
	def changelogRegex = ~"###? ${regexVersion}\\n\\n(( *- .+\\n)+)"
	def matcher = changelogText =~ changelogRegex

	if (matcher.find()) {
		def changelogContent = matcher.group(1)

		def changelogLines = changelogText.split('\n')
		def linkRefRegex = ~'^\\[([A-z0-9 _\\-/+.]+)]: '
		for (int i = changelogLines.length - 1; i > 0; i--) {
			def line = changelogLines[i]
			if ((line =~ linkRefRegex).find())
				changelogContent += '\n' + line
			else break
		}

		changelog = changelogContent
	} else {
		afterEvaluate {
			tasks.modrinth.setEnabled(false)
		}
	}
}

tasks.modrinth.dependsOn(build)
tasks.modrinth.doFirst {
	final def client = HttpClientBuilder.create().setDefaultRequestConfig(RequestConfig.custom().setCookieSpec(CookieSpecs.IGNORE_COOKIES).build()).build()
	final def patch = new HttpPatch((String) (modrinth.apiUrl.get() + '/project/' + project.modrinth_id))
	patch.addHeader("Authorization", modrinth.token.get())

	var json = new JsonObject()
	json.addProperty("body", parseReadme())
	patch.setEntity(EntityBuilder.create()
			.setText(json.toString())
			.setContentType(ContentType.APPLICATION_JSON)
			.build())

	final def response = client.execute(patch)
	final int status = response.getStatusLine().getStatusCode()

	final def gson = new GsonBuilder().create()
	if (status == 200 || status == 204) {
		project.getLogger().lifecycle("Successfully updated readme to ${modrinth.projectId.get()}.")
	} else {
		if (response.getEntity() == null) {
			project.getLogger().error("Readme update failed! Status: ${status} Reason: ${response.statusLine.reasonPhrase}")
			throw new GradleException("Readme update failed! Status: ${status} Reason: ${response.statusLine.reasonPhrase}")
		}
		errorInfo = gson.fromJson(EntityUtils.toString(response.getEntity()), ResponseError.class)
		project.getLogger().error("Readme update failed! Status: ${status} Error: ${errorInfo.getError()} Reason: ${errorInfo.getDescription()}")
		throw new GradleException("Readme failed! Status: ${status} Reason: ${errorInfo.getDescription()}")
	}
}

// Configure the maven publication.
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java

			pom {
				name = 'LambdaBetterGrass'
				description = 'Adds actual better grass to the game.'
			}
		}
	}

	repositories {
		mavenLocal()
		maven {
			name = 'BuildDirLocal'
			url = "$buildDir/repo"
		}
		maven {
			name = 'GithubPackages'
			url = uri('https://maven.pkg.github.com/LambdAurora/LambdaBetterGrass')
			credentials {
				username = project.findProperty('gpr.user') ?: System.getenv('USERNAME')
				password = project.findProperty('gpr.key') ?: System.getenv('TOKEN')
			}
		}
	}
}
